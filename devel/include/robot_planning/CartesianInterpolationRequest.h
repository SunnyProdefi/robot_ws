// Generated by gencpp from file robot_planning/CartesianInterpolationRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PLANNING_MESSAGE_CARTESIANINTERPOLATIONREQUEST_H
#define ROBOT_PLANNING_MESSAGE_CARTESIANINTERPOLATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_planning
{
template <class ContainerAllocator>
struct CartesianInterpolationRequest_
{
  typedef CartesianInterpolationRequest_<ContainerAllocator> Type;

  CartesianInterpolationRequest_()
    : branch_id(0)
    , joint_angles()
    , start_pose()
    , goal_pose()
    , duration(0.0)
    , frequency(0.0)  {
    }
  CartesianInterpolationRequest_(const ContainerAllocator& _alloc)
    : branch_id(0)
    , joint_angles(_alloc)
    , start_pose(_alloc)
    , goal_pose(_alloc)
    , duration(0.0)
    , frequency(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _branch_id_type;
  _branch_id_type branch_id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _start_pose_type;
  _start_pose_type start_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef double _duration_type;
  _duration_type duration;

   typedef double _frequency_type;
  _frequency_type frequency;





  typedef boost::shared_ptr< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianInterpolationRequest_

typedef ::robot_planning::CartesianInterpolationRequest_<std::allocator<void> > CartesianInterpolationRequest;

typedef boost::shared_ptr< ::robot_planning::CartesianInterpolationRequest > CartesianInterpolationRequestPtr;
typedef boost::shared_ptr< ::robot_planning::CartesianInterpolationRequest const> CartesianInterpolationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator1> & lhs, const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.branch_id == rhs.branch_id &&
    lhs.joint_angles == rhs.joint_angles &&
    lhs.start_pose == rhs.start_pose &&
    lhs.goal_pose == rhs.goal_pose &&
    lhs.duration == rhs.duration &&
    lhs.frequency == rhs.frequency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator1> & lhs, const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18b444c6aee4ab28318394690ca28c9f";
  }

  static const char* value(const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18b444c6aee4ab28ULL;
  static const uint64_t static_value2 = 0x318394690ca28c9fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_planning/CartesianInterpolationRequest";
  }

  static const char* value(const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 branch_id\n"
"float64[] joint_angles\n"
"float64[] start_pose  # [x, y, z, qx, qy, qz, qw]\n"
"float64[] goal_pose   # [x, y, z, qx, qy, qz, qw]\n"
"float64 duration      # 运动时间(秒)\n"
"float64 frequency     # 控制频率(Hz)\n"
;
  }

  static const char* value(const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.branch_id);
      stream.next(m.joint_angles);
      stream.next(m.start_pose);
      stream.next(m.goal_pose);
      stream.next(m.duration);
      stream.next(m.frequency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianInterpolationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_planning::CartesianInterpolationRequest_<ContainerAllocator>& v)
  {
    s << indent << "branch_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.branch_id);
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "start_pose[]" << std::endl;
    for (size_t i = 0; i < v.start_pose.size(); ++i)
    {
      s << indent << "  start_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_pose[i]);
    }
    s << indent << "goal_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_pose.size(); ++i)
    {
      s << indent << "  goal_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_pose[i]);
    }
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "frequency: ";
    Printer<double>::stream(s, indent + "  ", v.frequency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PLANNING_MESSAGE_CARTESIANINTERPOLATIONREQUEST_H
