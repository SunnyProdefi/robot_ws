// Generated by gencpp from file robot_planning/RobotPoseRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PLANNING_MESSAGE_ROBOTPOSEREQUEST_H
#define ROBOT_PLANNING_MESSAGE_ROBOTPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_planning
{
template <class ContainerAllocator>
struct RobotPoseRequest_
{
  typedef RobotPoseRequest_<ContainerAllocator> Type;

  RobotPoseRequest_()
    : float_base_pose()
    , branch2_joints()
    , branch3_joints()
    , source_frame()
    , target_frame()  {
    }
  RobotPoseRequest_(const ContainerAllocator& _alloc)
    : float_base_pose(_alloc)
    , branch2_joints(_alloc)
    , branch3_joints(_alloc)
    , source_frame(_alloc)
    , target_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _float_base_pose_type;
  _float_base_pose_type float_base_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _branch2_joints_type;
  _branch2_joints_type branch2_joints;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _branch3_joints_type;
  _branch3_joints_type branch3_joints;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_frame_type;
  _source_frame_type source_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_frame_type;
  _target_frame_type target_frame;





  typedef boost::shared_ptr< ::robot_planning::RobotPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_planning::RobotPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RobotPoseRequest_

typedef ::robot_planning::RobotPoseRequest_<std::allocator<void> > RobotPoseRequest;

typedef boost::shared_ptr< ::robot_planning::RobotPoseRequest > RobotPoseRequestPtr;
typedef boost::shared_ptr< ::robot_planning::RobotPoseRequest const> RobotPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_planning::RobotPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_planning::RobotPoseRequest_<ContainerAllocator1> & lhs, const ::robot_planning::RobotPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.float_base_pose == rhs.float_base_pose &&
    lhs.branch2_joints == rhs.branch2_joints &&
    lhs.branch3_joints == rhs.branch3_joints &&
    lhs.source_frame == rhs.source_frame &&
    lhs.target_frame == rhs.target_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_planning::RobotPoseRequest_<ContainerAllocator1> & lhs, const ::robot_planning::RobotPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_planning::RobotPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_planning::RobotPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planning::RobotPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07fe2ac8e025e36bfcb59b4b3e359c8e";
  }

  static const char* value(const ::robot_planning::RobotPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07fe2ac8e025e36bULL;
  static const uint64_t static_value2 = 0xfcb59b4b3e359c8eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_planning/RobotPoseRequest";
  }

  static const char* value(const ::robot_planning::RobotPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] float_base_pose  # [x, y, z, qx, qy, qz, qw] 相对于world坐标系的位姿\n"
"float64[] branch2_joints   # 分支2的关节角\n"
"float64[] branch3_joints   # 分支3的关节角\n"
"string source_frame        # 源坐标系名称\n"
"string target_frame        # 目标坐标系名称\n"
;
  }

  static const char* value(const ::robot_planning::RobotPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.float_base_pose);
      stream.next(m.branch2_joints);
      stream.next(m.branch3_joints);
      stream.next(m.source_frame);
      stream.next(m.target_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_planning::RobotPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_planning::RobotPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "float_base_pose[]" << std::endl;
    for (size_t i = 0; i < v.float_base_pose.size(); ++i)
    {
      s << indent << "  float_base_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.float_base_pose[i]);
    }
    s << indent << "branch2_joints[]" << std::endl;
    for (size_t i = 0; i < v.branch2_joints.size(); ++i)
    {
      s << indent << "  branch2_joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.branch2_joints[i]);
    }
    s << indent << "branch3_joints[]" << std::endl;
    for (size_t i = 0; i < v.branch3_joints.size(); ++i)
    {
      s << indent << "  branch3_joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.branch3_joints[i]);
    }
    s << indent << "source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source_frame);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PLANNING_MESSAGE_ROBOTPOSEREQUEST_H
